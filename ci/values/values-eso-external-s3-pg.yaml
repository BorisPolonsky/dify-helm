image:
  api:
    repository: langgenius/dify-api
    tag: "1.5.0"
    pullPolicy: IfNotPresent

  web:
    repository: langgenius/dify-web
    tag: "1.5.0"
    pullPolicy: IfNotPresent

  sandbox:
    repository: langgenius/dify-sandbox
    tag: "0.2.12"
    pullPolicy: IfNotPresent

  proxy:
    repository: nginx
    tag: latest
    pullPolicy: IfNotPresent

  ssrfProxy:
    repository: ubuntu/squid
    tag: latest
    pullPolicy: IfNotPresent

  pluginDaemon:
    repository: langgenius/dify-plugin-daemon
    tag: 0.1.2-local
    pullPolicy: IfNotPresent

api:
  enabled: true
  replicas: 1
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 5
    failureThreshold: 5
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 5
    successThreshold: 1
  startupProbe:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 5
    successThreshold: 1
  extraEnv:
    - name: CHECK_UPDATE_URL
      # Won't check for updates if left empty
      #   value: https://updates.dify.ai
      value: ""
    - name: CODE_MAX_NUMBER
      value: "9223372036854775807"
    - name: CODE_MIN_NUMBER
      value: "-9223372036854775808"
    - name: CODE_MAX_STRING_LENGTH
      value: "80000"
    - name: TEMPLATE_TRANSFORM_MAX_LENGTH
      value: "80000"
    - name: CODE_MAX_STRING_ARRAY_LENGTH
      value: "30"
    - name: CODE_MAX_OBJECT_ARRAY_LENGTH
      value: "30"
    - name: CODE_MAX_NUMBER_ARRAY_LENGTH
      value: "1000"
  service:
    port: 5001
    annotations: {}
    labels: {}
    clusterIP: ""
  # The log level for the application. Supported values are `DEBUG`, `INFO`, `WARNING`, `ERROR`, `CRITICAL`
  logLevel: INFO
  url:
    # The backend URL of the console API, used to concatenate the authorization callback.
    # If empty, it is the same domain. Example: https://api.console.dify.ai
    consoleApi: ""
    # The front-end URL of the console web, used to concatenate some front-end addresses and for CORS configuration use.
    # If empty, it is the same domain. Example: https://console.dify.ai
    consoleWeb: ""
    # Service API URL, used to display Service API Base URL to the front-end.
    # If empty, it is the same domain. Example: https://api.dify.ai
    serviceApi: ""
    # WebApp API backend URL, used to declare the back-end URL for the front-end API.
    # If empty, it is the same domain. Example: https://app.dify.ai
    appApi: ""
    # WebApp URL, used to display WebAPP API Base URL to the front-end. If empty, it is the same domain. Example: https://api.app.dify.ai
    appWeb: ""
    # File preview or download URL prefix, used to display the file preview
    # or download URL to the front-end or as a multi-modal model input;
    # In order to prevent others from forging, the image preview URL is signed and has a 5-minute expiration time.
    files: ""
    marketplaceApi: "https://marketplace.dify.ai"
    marketplace: "https://marketplace.dify.ai"
  mail:
    # default email sender from email address, if not given a specific address
    defaultSender: "YOUR EMAIL FROM (e.g.: no-reply <no-reply@dify.ai>)"
    # Mail type, supported values are `smtp`, `resend` https://docs.dify.ai/getting-started/install-self-hosted/environments#mail-related-configuration
    type: "resend"
    resend:
      # Resend API Key
      # Note: When using ExternalSecret, this value is managed externally
      apiKey: ""
      # Resend API URL
      apiUrl: https://api.resend.com
    # SMTP Configuration
    smtp:
      server: "smtp.server.com"
      port: 465
      username: ""
      # Note: When using ExternalSecret, this value is managed externally
      password: ""
      tls:
        enabled: true
        optimistic: false
  # When enabled, migrations will be executed prior to application startup and the application will start after the migrations have completed.
  migration: true
  secretKey: ""
  persistence:
    mountPath: "/app/api/storage"
    annotations:
      helm.sh/resource-policy: keep
    persistentVolumeClaim:
      existingClaim: ""
      storageClass:
      accessModes: ReadWriteMany
      size: 5Gi
      subPath: ""

worker:
  enabled: true
  replicas: 1
  extraEnv:
  logLevel: DEBUG

proxy:
  enabled: true
  replicas: 1
  extraEnv:
  # Apply your own Environment Variables if necessary
  # - name: LANG
  #   value: "C.UTF-8"
  log:
    persistence:
      ## If true, create/use a Persistent Volume Claim for log
      ## If false, flush logs to stdout & stderr
      ##
      enabled: false
      mountPath: "/var/log/nginx"
      annotations:
        helm.sh/resource-policy: keep
      persistentVolumeClaim:
        existingClaim: ""
        storageClass:
        accessModes: ReadWriteMany
        size: 1Gi
        subPath: ""
  service:
    port: 80

web:
  enabled: true
  replicas: 1
  livenessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 30
    timeoutSeconds: 5
    failureThreshold: 5
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 5
    successThreshold: 1
  startupProbe:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 5
    successThreshold: 1
  extraEnv:
    - name: EDITION
      value: "SELF_HOSTED"
  service:
    port: 3000
    annotations: {}
    labels: {}
    clusterIP: ""
  enableServiceLinks: false

sandbox:
  enabled: true
  replicas: 1
  livenessProbe:
    enabled: true
    initialDelaySeconds: 1
    periodSeconds: 5
    timeoutSeconds: 5
    failureThreshold: 2
    successThreshold: 1
  ## @param sandbox.readinessProbe.enabled Enable readinessProbe on sandbox nodes
  readinessProbe:
    enabled: true
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 2
    successThreshold: 1
  ## @param sandbox.startupProbe.enabled Enable startupProbe on sandbox containers
  startupProbe:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 2
    successThreshold: 1
  extraEnv:
    # Apply your own Environment Variables if necessary
    # - name: LANG
    #   value: "C.UTF-8"
    - name: WORKER_TIMEOUT
      value: "15"
  service:
    port: 8194
  auth:
    # Note: When using ExternalSecret, this value is managed externally
    apiKey: ""

pluginDaemon:
  enabled: true
  replicas: 1
  extraEnv:
  # Apply your own Environment Variables if necessary
  # - name: LANG
  #   value: "C.UTF-8"
  service:
    ports:
      daemon: 5002
      # Leave it unspecified in order NOT to expose port for remote installation as a `Service`.
      pluginInstall:
      # pluginInstall: 5003
    annotations: {}
    labels: {}
    clusterIP: ""
  auth:
    # Note: When using ExternalSecret, these values are managed externally
    serverKey: ""
    # A separate key for interactions between `api`(`worker`) and `pluginDaemon`
    difyApiKey: ""
  ## Storage for `pluginDaemon`
  ## Ignored if external object storage were configured via `.Values.externalS3` sections.
  ##
  persistence:
    mountPath: "/app/storage"
    annotations:
      helm.sh/resource-policy: keep
    persistentVolumeClaim:
      existingClaim: ""
      ## Dify Plugin Daemon Persistent Volume Storage Class
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is
      ##   set, choosing the default provisioner.
      ## ReadWriteMany access mode required for `pluginDaemon`
      ##
      storageClass:
      accessModes: ReadWriteMany
      size: 5Gi
      subPath: ""
  marketplace:
    enabled: true
    # Takes effect only if built-in `nginx` were enabled
    # If enabled, route marketplace api call to built-in `nginx` and strip headers for tracking.
    # https://github.com/BorisPolonsky/dify-helm/pull/131
    apiProxyEnabled: false

weaviate:
  enabled: true
  image:
    # registry where weaviate image is stored
    registry: docker.io
    # Tag of weaviate image to deploy
    # Note: We strongly recommend you overwrite this value in your own values.yaml.
    # Otherwise a mere upgrade of the chart could lead to an unexpected upgrade
    # of weaviate. In accordance with Infra-as-code, you should pin this value
    # down and only change it if you explicitly want to upgrade the Weaviate
    # version.
    tag: 1.19.1
    repo: semitechnologies/weaviate

  # overwrite command and args if you want to run specific startup scripts, for
  # example setting the nofile limit
  command: ["/bin/weaviate"]
  args:
    - "--host"
    - "0.0.0.0"
    - "--port"
    - "8080"
    - "--scheme"
    - "http"
    - "--config-file"
    - "/weaviate-config/conf.yaml"
    - --read-timeout=60s
    - --write-timeout=60s

  initContainers:
    sysctlInitContainer:
      enabled: true
      sysctlVmMaxMapCount: 524288
      image:
        registry: docker.io
        repo: alpine
        tag: latest
        pullPolicy: IfNotPresent

    extraInitContainers: {}

  replicas: 1

  # Add a service account ot the Weaviate pods if you need Weaviate to have permissions to
  # access kubernetes resources or cloud provider resources. For example for it to have
  # access to a backup up bucket, or if you want to restrict Weaviate pod in any way.
  # By default, use the default ServiceAccount
  serviceAccountName:

  # The Persistent Volume Claim settings for Weaviate. If there's a
  # storage.fullnameOverride field set, then the default pvc will not be
  # created, instead the one defined in fullnameOverride will be used
  storage:
    size: 32Gi
    storageClassName: ""

  # The service controls how weaviate is exposed to the outside world. If you
  # don't want a public load balancer, you can also choose 'ClusterIP' to make
  # weaviate only accessible within your cluster.
  service:
    name: weaviate
    type: ClusterIP

  livenessProbe:
    initialDelaySeconds: 900
    periodSeconds: 10
    failureThreshold: 30
    successThreshold: 1
    timeoutSeconds: 3

  readinessProbe:
    initialDelaySeconds: 3
    periodSeconds: 10
    failureThreshold: 3
    successThreshold: 1
    timeoutSeconds: 3

  terminationGracePeriodSeconds: 600

  # Weaviate Config
  #
  # The following settings allow you to customize Weaviate to your needs, for
  # example set authentication and authorization options. See weaviate docs
  # (https://www.weaviate.io/developers/weaviate/) for all
  # configuration.
  authentication:
    anonymous_access:
      enabled: false
    # This configuration allows to add API keys to Weaviate. This configuration allows only
    # plain text API Keys, if you want to store the API Keys in a Kubernetes secret you can
    # configure the same configuration with ENV Vars. Read the `env` section below on what
    # needs to be configured. If using ENV Vars over this make sure to comment out the whole
    # `apikey` section (as it is by default). ENV Vars has priority over this config.
    apikey:
      enabled: true
      # Any number of allowed API Keys as plain text
      # Note: When using ExternalSecret, this value is managed externally
      allowed_keys:
        - ""
      # You can either set a single user for all the listed Allowed API keys OR
      # one user per API Key, i.e. length(apikey.allowed_keys) == length(apikey.users) OR
      # length(apikey.users) == 1
      # Only the first user-key pair will be used by `dify.api` and `dify-worker`
      # NOTE: Make sure the lister Users are added to the Authorization as well.
      users:
        - hello@dify.ai

  authorization:
    admin_list:
      enabled: true
      users:
        # Examples
        # - admin_user1
        # - admin_user2
        # - api-key-user-admin
        - hello@dify.ai
      read_only_users:
      # Examples
      # - readonly_user1
      # - readonly_user2
      # - api-key-user-readOnly

  query_defaults:
    limit: 100
  debug: false

  # Insert any custom environment variables or envSecrets by putting the exact name
  # and desired value into the settings below. Any env name passed will be automatically
  # set for the statefulSet.
  env:
    CLUSTER_GOSSIP_BIND_PORT: 7000
    CLUSTER_DATA_BIND_PORT: 7001
    # The aggressiveness of the Go Garbage Collector. 100 is the default value.
    GOGC: 100

    # Expose metrics on port 2112 for Prometheus to scrape
    PROMETHEUS_MONITORING_ENABLED: false

    # Set a MEM limit for the Weaviate Pod so it can help you both increase GC-related
    # performance as well as avoid GC-related out-of-memory (“OOM”) situations
    # GOMEMLIMIT: 6GiB

    # Maximum results Weaviate can query with/without pagination
    # NOTE: Affects performance, do NOT set to a very high value.
    # The default is 100K
    QUERY_MAXIMUM_RESULTS: 100000

    # whether to enable vector dimensions tracking metric
    TRACK_VECTOR_DIMENSIONS: false

    # whether to re-index/-compute the vector dimensions metric (needed if upgrading from weaviate < v1.16.0)
    REINDEX_VECTOR_DIMENSIONS_AT_STARTUP: false

    ##########################
    # API Keys with ENV Vars #
    ##########################
    # If using ENV Vars to set up API Keys make sure to have `authentication.apikey` block commented out
    # to avoid any future changes. ENV Vars has priority over the config above `authentication.apikey`.
    # If using `authentication.apikey `the below ENV Vars will be used because they have priority,
    # so comment them out to avoid any future changes.
    # Enables API key authentication. If it is set to 'false' the AUTHENTICATION_APIKEY_ALLOWED_KEYS
    # and AUTHENTICATION_APIKEY_USERS will not have any effect.
    # AUTHENTICATION_APIKEY_ENABLED: 'true'

    # List one or more keys, separated by commas. Each key corresponds to a specific user identity below.
    # If you want to use a kubernetes secret for the API Keys comment out this Variable and use the one in `envSecrets` below
    # AUTHENTICATION_APIKEY_ALLOWED_KEYS: 'jane-secret-key,ian-secret-key'  (plain text)

    # List one or more user identities, separated by commas. You can have only one User for all the keys or one user per key.
    # The User/s can be a simple name or an email, no matter if it exists or not.
    # NOTE: Make sure to add the users to the authorization above overwise they will not be allowed to interact with Weaviate.
    # AUTHENTICATION_APIKEY_USERS: 'jane@doe.com,ian-smith'
    AUTHENTICATION_APIKEY_ENABLED: "true"
    # Note: When using ExternalSecret, this value is managed externally
    # AUTHENTICATION_APIKEY_ALLOWED_KEYS: ""
    AUTHENTICATION_APIKEY_USERS: "hello@dify.ai"
    AUTHORIZATION_ADMINLIST_ENABLED: "true"
    AUTHORIZATION_ADMINLIST_USERS: "hello@dify.ai"
  envSecrets:
    # create a Kubernetes secret with AUTHENTICATION_APIKEY_ALLOWED_KEYS key and its respective value
    # When using ExternalSecret, reference the secret created by ExternalSecret
    AUTHENTICATION_APIKEY_ALLOWED_KEYS: dify-weaviate

  # modules are extensions to Weaviate, they can be used to support various
  # ML-models, but also other features unrelated to model inference.
  # An inference/vectorizer module is not required, you can also run without any
  # modules and import your own vectors.
  modules:
    # by choosing the default vectorizer module, you can tell Weaviate to always
    # use this module as the vectorizer if nothing else is specified. Can be
    # overwritten on a per-class basis.
    # set to text2vec-transformers if running with transformers instead
    default_vectorizer_module: none

  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 1
          podAffinityTerm:
            topologyKey: "kubernetes.io/hostname"
            labelSelector:
              matchExpressions:
                - key: "app"
                  operator: In
                  values:
                    - weaviate

service:
  type: ClusterIP
  port: 80

redis:
  enabled: true
  image:
    registry: docker.io
    repository: bitnami/redis
    tag: 7.0.11-debian-11-r12
    debug: false

  architecture: standalone

  auth:
    enabled: true
    sentinel: true
    password:
    existingSecret: "redis-secret"
    existingSecretPasswordKey: ""
    usePasswordFiles: false

  commonConfiguration: |-
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
  existingConfigmap: ""
  master:
    count: 1
    configuration: ""
    disableCommands:
      - FLUSHDB
      - FLUSHALL
    containerPorts:
      redis: 6379
    startupProbe:
      enabled: false
      initialDelaySeconds: 20
      periodSeconds: 5
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 5
    livenessProbe:
      enabled: true
      initialDelaySeconds: 20
      periodSeconds: 5
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 5
    readinessProbe:
      enabled: true
      initialDelaySeconds: 20
      periodSeconds: 5
      timeoutSeconds: 1
      successThreshold: 1
      failureThreshold: 5
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    persistence:
      enabled: true
      path: /data
      accessModes:
        - ReadWriteOnce
      size: 8Gi
    service:
      type: ClusterIP
      ports:
        redis: 6379
      nodePorts:
        redis: ""
      externalTrafficPolicy: Cluster

  serviceBindings:
    enabled: false

  ## ServiceAccount configuration
  ##
  serviceAccount:
    ## @param serviceAccount.create Specifies whether a ServiceAccount should be created
    ##
    create: true
    ## @param serviceAccount.name The name of the ServiceAccount to use.
    ## If not set and create is true, a name is generated using the common.names.fullname template
    ##
    name: ""
    ## @param serviceAccount.automountServiceAccountToken Whether to auto mount the service account token
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#use-the-default-service-account-to-access-the-api-server
    ##
    automountServiceAccountToken: true

###################################
# External postgres
# - these configs are only used when `externalPostgres.enabled` is true
###################################
externalPostgres:
  enabled: true
  # Note: When using ExternalSecret, these values are managed externally
  username: ""
  password: ""
  address: pg1.uat.internal.dify.ai
  port: 5432
  database:
    api: "dify"
    pluginDaemon: "dify_plugin"
  maxOpenConns: 20
  maxIdleConns: 5

###################################
# External S3
# - these configs are only used when `externalS3.enabled` is true
###################################
externalS3:
  enabled: true
  endpoint: "http://minio:9000"
  pathStyle: true
  # Note: When using ExternalSecret, these values are managed externally
  accessKey: ""
  secretKey: ""
  useSSL: false
  bucketName:
    # Shared storage for `api` and `worker`
    api: "difyai"
    # If specifed, `pluginDaemon` will use this bucket instead of binding `PersistentVolume` for data persistence (only used when `externalS3.enabled` is set to `true`).
    pluginDaemon: ""
  useIAM: false
  region: "auto"

###################################
# External Secret (External Secrets Operator)
# - these configs are used when `externalSecret.enabled` is true
# - when enabled, the built-in Secret resources will be replaced by ExternalSecret resources
###################################
externalSecret:
  enabled: true

  # External secret store backend provider (e.g., vault, aws, azure, gcp, etc.)
  secretStore:
    # SecretStore or ClusterSecretStore name to reference
    name: "default-secret-store"
    # kind: SecretStore or ClusterSecretStore
    kind: "ClusterSecretStore"

  # Configuration for api secret
  api:
    # Whether to create ExternalSecret for api
    enabled: true
    # Refresh interval for the ExternalSecret
    refreshInterval: "15m"
    # Remote references for external secret store
    # Only specify the fields you want to include - all possible fields are defined in the template
    remoteRefs:
      SECRET_KEY:
        key: "dify/api"
        property: "secret_key"
      CODE_EXECUTION_API_KEY:
        key: "dify/sandbox"
        property: "api_key"
      DB_USERNAME:
        key: "dify/database"
        property: "username"
      DB_PASSWORD:
        key: "dify/database"
        property: "password"
      REDIS_USERNAME:
        key: "dify/redis"
        property: "username"
      REDIS_PASSWORD:
        key: "dify/redis"
        property: "password"
      CELERY_BROKER_URL:
        key: "dify/redis"
        property: "celery_broker_url"
      WEAVIATE_API_KEY:
        key: "dify/weaviate"
        property: "api_key"
      RESEND_API_KEY:
        key: "dify/mail"
        property: "resend_api_key"
      PLUGIN_DAEMON_KEY:
        key: "dify/plugin-daemon"
        property: "server_key"
      INNER_API_KEY_FOR_PLUGIN:
        key: "dify/plugin-daemon"
        property: "dify_api_key"
      S3_ACCESS_KEY:
        key: "dify/s3"
        property: "access_key"
      S3_SECRET_KEY:
        key: "dify/s3"
        property: "secret_key"

  # Configuration for worker secret
  worker:
    # Whether to create ExternalSecret for worker
    enabled: true
    # Refresh interval for the ExternalSecret
    refreshInterval: "15m"
    # Remote references for external secret store
    remoteRefs:
      SECRET_KEY:
        key: "dify/api"
        property: "secret_key"
      DB_USERNAME:
        key: "dify/database"
        property: "username"
      DB_PASSWORD:
        key: "dify/database"
        property: "password"
      REDIS_USERNAME:
        key: "dify/redis"
        property: "username"
      REDIS_PASSWORD:
        key: "dify/redis"
        property: "password"
      CELERY_BROKER_URL:
        key: "dify/redis"
        property: "celery_broker_url"
      WEAVIATE_API_KEY:
        key: "dify/weaviate"
        property: "api_key"
      RESEND_API_KEY:
        key: "dify/mail"
        property: "resend_api_key"
      PLUGIN_DAEMON_KEY:
        key: "dify/plugin-daemon"
        property: "server_key"
      INNER_API_KEY_FOR_PLUGIN:
        key: "dify/plugin-daemon"
        property: "dify_api_key"
      S3_ACCESS_KEY:
        key: "dify/s3"
        property: "access_key"
      S3_SECRET_KEY:
        key: "dify/s3"
        property: "secret_key"

  # Configuration for sandbox secret
  sandbox:
    # Whether to create ExternalSecret for sandbox
    enabled: true
    # Refresh interval for the ExternalSecret
    refreshInterval: "15m"
    # Remote references for external secret store
    remoteRefs:
      API_KEY:
        key: "dify/sandbox"
        property: "api_key"

  # Configuration for plugin daemon secret
  pluginDaemon:
    # Whether to create ExternalSecret for plugin daemon
    enabled: true
    # Refresh interval for the ExternalSecret
    refreshInterval: "15m"
    # Remote references for external secret store
    remoteRefs:
      DB_USERNAME:
        key: "dify/database"
        property: "username"
      DB_PASSWORD:
        key: "dify/database"
        property: "password"
      REDIS_USERNAME:
        key: "dify/redis"
        property: "username"
      REDIS_PASSWORD:
        key: "dify/redis"
        property: "password"
      SERVER_KEY:
        key: "dify/plugin-daemon"
        property: "server_key"
      DIFY_INNER_API_KEY:
        key: "dify/plugin-daemon"
        property: "dify_api_key"

  # Configuration for PostgreSQL secret (for built-in PostgreSQL with ExternalSecret)
  postgresql:
    # Whether to create ExternalSecret for built-in PostgreSQL
    enabled: true
    # Refresh interval for the ExternalSecret
    refreshInterval: "15m"
    # Remote references for external secret store
    remoteRefs:
      postgres-password:
        key: "dify/postgresql"
        property: "postgres_password"
      replication-password:
        key: "dify/postgresql"
        property: "replication_password"

  # Configuration for Redis secret (for built-in Redis with ExternalSecret)
  redis:
    # Whether to create ExternalSecret for built-in Redis
    enabled: true
    # Refresh interval for the ExternalSecret
    refreshInterval: "15m"
    # Remote references for external secret store
    remoteRefs:
      redis-password:
        key: "dify/redis"
        property: "redis_password"

  # Configuration for Weaviate secret (for built-in Weaviate with ExternalSecret)
  weaviate:
    # Whether to create ExternalSecret for built-in Weaviate
    enabled: true
    # Refresh interval for the ExternalSecret
    refreshInterval: "15m"
    # Remote references for external secret store
    remoteRefs:
      AUTHENTICATION_APIKEY_ALLOWED_KEYS:
        key: "dify/weaviate"
        property: "api_key"
