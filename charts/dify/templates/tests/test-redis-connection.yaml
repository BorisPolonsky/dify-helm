apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ include "dify.fullname" . }}-test-redis-connection"
  labels:
    {{- include "dify.labels" . | nindent 4 }}
    component: "redis"
  annotations:
    "helm.sh/hook": test
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
        - name: check-redis
          image: "{{ .Values.redis.image.registry }}/{{ .Values.redis.image.repository }}:{{ .Values.redis.image.tag }}"
          command:
            - sh
            - -c
            - |
{{- if or (and .Values.externalRedis.enabled .Values.externalRedis.sentinel.enabled) (and .Values.redis.enabled .Values.redis.sentinel.enabled) }}
              # Test connection to Redis with Sentinel enabled
              echo "Testing Redis Sentinel connection..."
{{- if and .Values.externalRedis.enabled .Values.externalRedis.sentinel.enabled }}
              # Parse the sentinels list into an array
              OLD_IFS=$IFS
              IFS=','
              sentinels=($REDIS_SENTINELS)
              IFS=$OLD_IFS
{{- else }}
              RELEASE_NAME="{{ .Release.Name }}"
              NAMESPACE="{{ .Release.Namespace }}"
              SENTINEL_PORT={{ .Values.redis.sentinel.service.ports.sentinel | int }}
              REPLICAS={{ .Values.redis.replica.replicaCount }}
              
              # Generate the sentinels list
              sentinels=()
              for i in $(seq 0 $((REPLICAS-1))); do
                sentinels+=("${RELEASE_NAME}-redis-node-${i}.${RELEASE_NAME}-redis-headless.${NAMESPACE}.svc.cluster.local:${SENTINEL_PORT}")
              done
{{- end }}
              
              # Test connectivity to each sentinel
              for sentinel in "${sentinels[@]}"; do
                # Split host and port
                OLD_IFS=$IFS
                IFS=':'
                parts=($sentinel)
                IFS=$OLD_IFS
                
                SENTINEL_HOST=${parts[0]}
                SENTINEL_PORT=${parts[1]}
                
                until redis-cli -h "$SENTINEL_HOST" -p "$SENTINEL_PORT" -a "$REDIS_SENTINEL_PASSWORD" ping | grep -q PONG; do
                  echo "Waiting for Redis Sentinel at $SENTINEL_HOST:$SENTINEL_PORT to be available..."
                  sleep 1
                done
              done
              
              # Get the master from one of the sentinels
{{- if and .Values.externalRedis.enabled .Values.externalRedis.sentinel.enabled }}
              OLD_IFS=$IFS
              IFS=':'
              parts=(${sentinels[0]})
              IFS=$OLD_IFS
              
              SENTINEL_HOST=${parts[0]}
              SENTINEL_PORT=${parts[1]}
{{- else }}
              SENTINEL_HOST="${RELEASE_NAME}-redis-node-0.${RELEASE_NAME}-redis-headless.${NAMESPACE}.svc.cluster.local"
              SENTINEL_PORT={{ .Values.redis.sentinel.service.ports.sentinel | int }}
{{- end }}
              
              echo "Getting master address from Sentinel..."
              REDIS_MASTER_INFO=$(redis-cli -h "$SENTINEL_HOST" -p "$SENTINEL_PORT" -a "$REDIS_SENTINEL_PASSWORD" sentinel get-master-addr-by-name "$REDIS_SENTINEL_SERVICE_NAME")
              echo "Master info: $REDIS_MASTER_INFO"
              
              # Use awk to extract host and port instead of head/tail
              REDIS_MASTER_HOST=$(echo "$REDIS_MASTER_INFO" | awk 'NR==1')
              REDIS_MASTER_PORT=$(echo "$REDIS_MASTER_INFO" | awk 'NR==2')
              
              echo "Master host: $REDIS_MASTER_HOST, port: $REDIS_MASTER_PORT"
              
              until redis-cli -h "$REDIS_MASTER_HOST" -p "$REDIS_MASTER_PORT" -a "$REDIS_PASSWORD" ping | grep -q PONG; do
                echo "Waiting for Redis master at $REDIS_MASTER_HOST:$REDIS_MASTER_PORT to be available..."
                sleep 1
              done
              echo "Redis with Sentinel is ready."
{{- else }}
              # Test connection to standard Redis setup
              until redis-cli -h "$REDIS_HOST" -p "$REDIS_PORT" -a "$REDIS_PASSWORD" ping | grep -q PONG; do
                echo "Waiting for Redis service to be available..."
                sleep 1
              done
              echo "Redis is ready."
{{- end }}
          envFrom:
          - configMapRef:
              name: {{ template "dify.api.fullname" . }}
          - secretRef:
              name: {{ template "dify.api.fullname" . }}